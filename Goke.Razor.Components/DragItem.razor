@typeparam TItem

@if (Items != null)
{
    @foreach (var item in Items)
    {
        <div class="@(Draggable ? "drag-item | tile ":"drag-item | tile disabled")" style="cursor: pointer;"
             @onclick="(e) => HandleClick(item)"
             @ondragstart="(e) => HandleDragStart(e, item)"
             draggable="@Draggable">


            @if (BodyTemplate is not null)
            {
                BodyTemplate(item);
            }
        </div>
    }

}


@code {
    [Parameter]
    public RenderFragment<TItem>? BodyTemplate { get; set; }

    [Parameter]
    public IEnumerable<TItem>? Items { get; set; }

    [Parameter]
    public bool Draggable { get; set; } = true;

    [Parameter]
    public EventCallback<TItem> OnClick { get; set; }
    [Parameter]
    public EventCallback<DragItemArgs<TItem>> OnDragStart { get; set; }

    void HandleClick(TItem item)
    {
        OnClick.InvokeAsync(item);
    }

    void HandleDragStart(DragEventArgs e, TItem item)
    {
        DragItemArgs<TItem> args = new() { DragEventArgs = e, Item = item };
        OnDragStart.InvokeAsync(args);
    }

    public class DragItemArgs<T>
    {
        public DragEventArgs? DragEventArgs { get; set; }
        public T? Item { get; set; }
    }

}