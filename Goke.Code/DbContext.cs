//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.EntityFrameworkCore;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;

namespace Microsoft.EntityFrameworkCore
{
    public enum EntityState
    {
        Detached = 0,
        Unchanged = 1,
        Deleted = 2,
        Modified = 3,
        Added = 4
    }

    public class ModelBuilder
    {

    }

    public class DbContext
    {
        public DbContext(DbContextOptions<DbContext> options)
        {
        }

        public Database Database { get; set; }

        virtual protected void OnModelCreating(ModelBuilder builder)
        {
            throw new NotImplementedException();
        }

        public Task<int> SaveChangesAsync()
        {
            throw new NotImplementedException();
        }
        public int SaveChanges()
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<T> Entry<T>(T entity)
            where T : class
        {
            throw new NotImplementedException();
        }

        public void Dispose()
        {
            throw new NotImplementedException();
        }

    }

    public class EntityEntry<T>
    {
        public EntityState State { get; set; }
    }

    public interface Database
    {
        void CloseConnection();

        void ExecuteSqlRaw(string v);
        void Migrate();
        void OpenConnection();
    }

    public abstract class DbSet<T> : IQueryable<T>, IEnumerable<T>, IEnumerable, IQueryable/*, IInfrastructure<IServiceProvider>, IListSource*/ where T : class
    {
        public Expression Expression => throw new NotImplementedException();

        public Type ElementType => throw new NotImplementedException();

        public IQueryProvider Provider => throw new NotImplementedException();


        public IEnumerator<T> GetEnumerator()
        {
            throw new NotImplementedException();
        }

        public void Add(T entity)
        {
            throw new NotImplementedException();
        }

        public Task<T> FindAsync(int id)
        {
            throw new NotImplementedException();
        }

        public void Remove(T entity)
        {
            throw new NotImplementedException();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            throw new NotImplementedException();
        }
    }

    public static class EntityFrameworkQueryableExtensions
    {
        public static IQueryable<TEntity> Include<TEntity>(
            this IQueryable<TEntity> source,
            string navigationPropertyPath)
            where TEntity : class
        {
            throw new NotImplementedException();
        }

        public static IQueryable<TEntity> AsNoTracking<TEntity>(
            this IQueryable<TEntity> source)
            where TEntity : class
        {
            throw new NotImplementedException();
        }
        public static Task<List<TSource>> ToListAsync<TSource>(
            this IQueryable<TSource> source,
            CancellationToken cancellationToken = default)
        {
            throw new NotImplementedException();
        }

        public static Task<TSource> FirstOrDefaultAsync<TSource>(
            this IQueryable<TSource> source,
            CancellationToken cancellationToken = default)
        {
            throw new NotImplementedException();
        }
        public static Task<TSource> SingleOrDefaultAsync<TSource>(
            this IQueryable<TSource> source,
            Expression<Func<TSource, bool>> predicate,
            CancellationToken cancellationToken = default)
        {
            throw new NotImplementedException();
        }
    }



}
