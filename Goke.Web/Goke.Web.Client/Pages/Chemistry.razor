@page "/chemistry"

@using Goke.Web.Shared.Models;

@rendermode InteractiveAuto

<PageTitle>Chemistry Game</PageTitle>

<!-- +wizard -->
<div class="wizard">
    <div class="wizard-body">
        <div class="wizard-page">
            <div class="">
                <h3>Welcome</h3>
            </div>

        </div>
        <div class="wizard-page">
            <h3>Instructions</h3>

        </div>
        <div class="wizard-page">
            <div class="lab">
                <div class="lab-menu">
                    <div style="display:flex; justify-content:space-between;">
                        <div>@_labCounter</div>
                        <div>@Time</div>
                        <div>@_clock</div>
                    </div>
                </div>
                <div class="lab-center" style="@_dropStatusCss"
                     @onclick="OnLaboratoryTable"
                     @ondrop="HandleDrop"
                     @ondragover="HandleDragOver"
                     @ondrop:preventDefault="true"
                     @ondragover:preventDefault="true">
                    <div class="lab-center-top">
                        @if (_showTitrationTimer)
                        {
                            <div>
                                <button class="default" style="display: block; position: absolute; top: 0; left: 0;" @onclick=ToggleTitration>
                                    <div>
                                        @(_isTitrationOn ? "STOP" : "START")
                                    </div>
                                    @TitrationTime
                                </button>
                            </div>
                        }
                        <div>
                            @((MarkupString)_action)
                        </div>
                    </div>
                </div>
                <div class="lab-toolbar">
                    <div class="lab-bottom">
                        @if (_actionTime > _minTimeInSeconds)
                        {
                            foreach (var p in _apparatuses)
                            {
                                <div class="tile" style="cursor: pointer;"
                                     @onclick="@(()=>_selected = p.Item)"
                                     @ondragstart="@((e) => HandleDragStart(e, p))"
                                     draggable="true">
                                    <div>
                                        <img src="@p.Media" />
                                        @p.Title
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            foreach (var p in _apparatuses)
                            {
                                <div class="tile disabled" disabled="true">
                                    <div>
                                        <img src="@p.Media" />
                                        @p.Title
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="wizard-page">
            <h3>Report</h3>
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Alias obcaecati facere nemo itaque nesciunt
            odio autem provident praesentium facilis at dolore doloremque soluta esse expedita iste quibusdam,
            recusandae cupiditate sit?
        </div>
    </div>
    <div class="wizard-controller ">
        <div class="wizard-controller-labels show-text show-radio">
            <label class="wizard-page-controller-label">
                <span>Welcome</span>
                <input type="radio" name="wizard-page" id="wizardpage1" class="wizard-page-controller">
            </label>
            <label class="wizard-page-controller-label">
                <span>Instructions</span>
                <input type="radio" name="wizard-page" id="wizardpage2" class="wizard-page-controller">
            </label>
            <label class="wizard-page-controller-label">
                <span>Game</span>
                <input type="radio" name="wizard-page" id="wizardpage3" class="wizard-page-controller" checked>
            </label>
            <label class="wizard-page-controller-label">
                <span>Report</span>
                <input type="radio" name="wizard-page" id="wizardpage4" class="wizard-page-controller">
            </label>

        </div>
    </div>
</div>
<!-- -wizard -->
<div class="game-sound| " style="display: none">
    @switch (_gameStatus)
    {
        case GameStatus.Success:
            <audio autoplay controls><source src="audios/success2.mp3" /></audio>
            break;
        case GameStatus.Fail:
            <audio autoplay controls><source src="audios/fail.mp3" /></audio>
            break;
        case GameStatus.Start:
            <audio autoplay controls><source src="audios/start.mp3" /></audio>
            break;
        case GameStatus.End:
            <audio autoplay controls><source src="audios/end.mp3" /></audio>
            break;
        default: break;
    }

</div>

@code {
    enum GameStatus { None, Success, Fail, Start, End }

    GameStatus _gameStatus;

    Titration titration = new();
    List<Apparatus> _apparatuses = default!;

    ApparatusItem _selected;
    ApparatusItem _target;
    ApparatusItem _previousTarget;
    string _action = "Drag and Drop Apparatus here";
    int _actionTime, _minTimeInSeconds;
    int _order;

    Queue<ApparatusItem>? queueItems;

    static System.Timers.Timer _timer = new(1000);
    string _clock = default!;
    int _labCounter;
    string Time => TimeSpan.FromSeconds(_labCounter).ToString();

    bool _isTitrationOn;
    bool _showTitrationTimer;
    int _titrationCounter;
    string TitrationTime => TimeSpan.FromSeconds(_titrationCounter).ToString();

    protected override void OnInitialized()
    {
        _timer.Elapsed += (o, e) =>
        {
            _labCounter++;
            _actionTime++;

            if (_isTitrationOn)
            {
                _titrationCounter++;
            }

            _clock = e.SignalTime.ToString("HH:mm:ss");
            this.InvokeAsync(StateHasChanged);
        };

        StartTimer();
        _apparatuses = titration.Apparatuses;
        NextSequence(_order);
    }

    void StartTimer()
    {
        // Have the timer fire repeated events (true is the default)
        _timer.AutoReset = true;

        // Start the timer
        _timer.Enabled = true;
        _gameStatus = GameStatus.Start;
    }

    void EndTimer()
    {
        // Have the timer fire repeated events (true is the default)
        _timer.AutoReset = false;

        // Start the timer
        _timer.Enabled = false;
        _gameStatus = GameStatus.End;
    }

    void NextSequence(int index)
    {
        if (index < titration.Sequences.Count)
        {
            queueItems = new(titration.Sequences[index]);
            _target = ApparatusItem.None;

            if (queueItems?.Count() > 0)
            {
                _previousTarget = _target;
                _target = queueItems!.Dequeue();
            }
        }
        //_apparatuses = ShuffleByOrderBy(titration.Apparatuses);
        Shuffle(_apparatuses);
    }

    void OnLaboratoryTable()
    {
        if (_target == _selected)
        {
            var selectedApparatus = titration.Apparatuses.First(w => w.Item == _selected);
            // _action = selectedApparatus.Action();
            if (selectedApparatus.Update is not null)
            {
                selectedApparatus.Update(titration.Apparatuses, _target, _previousTarget);
                //this.StateHasChanged();
            }
            _action = selectedApparatus.Action();

            if (queueItems?.Count() > 0)
            {
                _previousTarget = _target;
                _target = queueItems!.Dequeue();
            }
            else
            {
                NextSequence(_order += 1);
            }
        }
        else
        {

        }
    }

    string _dropStatusCss = "outline: 3px solid transparent;";
    Apparatus? _selectedApparatus;
    void HandleDragStart(DragEventArgs e, Apparatus p)
    {
        e.DataTransfer.DropEffect = "copy";
        _selectedApparatus = p;
        _dropStatusCss = "outline: 3px solid transparent;";
        _gameStatus = GameStatus.None;
    }

    void HandleDragOver(DragEventArgs e)
    {
        e.DataTransfer.DropEffect = "copy";
    }

    void HandleDrop(DragEventArgs e)
    {
        _selected = _selectedApparatus!.Item;
        if (_target == _selected)
        {
            if (_target == ApparatusItem.Titration)
            {
                _showTitrationTimer = true;
            }
            OnLaboratoryTable();
            _dropStatusCss = "outline: 3px solid green;";
            _gameStatus = GameStatus.Success;
            _actionTime = 0;
            _minTimeInSeconds = _selectedApparatus.MinTimeInSeconds;
        }
        else
        {
            _dropStatusCss = "outline: 3px solid red;";
            _gameStatus = GameStatus.Fail;
        }
    }

    void ToggleTitration()
    {
        _isTitrationOn = !_isTitrationOn;
    }

    public List<T> ShuffleByOrderBy<T>(List<T> listToShuffle)
    {
        return listToShuffle.OrderBy(x => Guid.NewGuid()).ToList();
    }

    private static Random rng = new Random();

    public void Shuffle<T>(IList<T> list)
    {
        int n = list.Count;
        while (n > 1)
        {
            n--;
            int k = rng.Next(n + 1);
            T value = list[k];
            list[k] = list[n];
            list[n] = value;
        }
    }

}
