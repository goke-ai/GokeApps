@page "/chemistry"

@using Goke.Web.Shared.Models;

@rendermode InteractiveAuto

<PageTitle>Chemistry Game</PageTitle>

<!-- +wizard -->
<div class="wizard">
    <div class="wizard-body">
        <div class="wizard-page">
            <div class="">
                <h3>Welcome</h3>
            </div>

        </div>
        <div class="wizard-page">
            <h3>Instructions</h3>

        </div>
        <div class="wizard-page">
            <div class="lab">
                <div class="lab-center" style="@_dropStatusCss"
                     @onclick="OnLaboratoryTable"
                     @ondrop="HandleDrop" 
                     @ondragover="HandleDragOver"
                     @ondrop:preventDefault="true" 
                     @ondragover:preventDefault="true">
                    <div class="lab-center-top">
                        <div>
                            @((MarkupString)_action)
                        </div>
                    </div>
                </div>
                <div class="lab-toolbar">
                    <div class="lab-bottom">
                        @foreach (var p in titration.Apparatuses)
                        {
                            <div class="tile" 
                                @onclick="@(()=>_selected = p.Item)"  
                                @ondragstart="@((e) => HandleDragStart(e, p))" 
                                draggable="true">
                                <div>
                                    <img src="@p.Media" />
                                    @p.Title
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

        </div>
        <div class="wizard-page">
            <h3>Report</h3>
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Alias obcaecati facere nemo itaque nesciunt
            odio autem provident praesentium facilis at dolore doloremque soluta esse expedita iste quibusdam,
            recusandae cupiditate sit?
        </div>

    </div>
    <div class="wizard-controller ">
        <div class="wizard-controller-labels show-text show-radio">
            <label class="wizard-page-controller-label">
                <span>Welcome</span>
                <input type="radio" name="wizard-page" id="wizardpage1" class="wizard-page-controller" checked>
            </label>
            <label class="wizard-page-controller-label">
                <span>Instructions</span>
                <input type="radio" name="wizard-page" id="wizardpage2" class="wizard-page-controller">
            </label>
            <label class="wizard-page-controller-label">
                <span>Game</span>
                <input type="radio" name="wizard-page" id="wizardpage3" class="wizard-page-controller">
            </label>
            <label class="wizard-page-controller-label">
                <span>Report</span>
                <input type="radio" name="wizard-page" id="wizardpage4" class="wizard-page-controller">
            </label>

        </div>
    </div>

</div>
<!-- -wizard -->
@code {
    Titration titration = new();

    ApparatusItem _selected;
    ApparatusItem _target;
    ApparatusItem _previousTarget;
    string _action =string.Empty;
    int _order;

    Queue<ApparatusItem>? queueItems;

    protected override void OnInitialized()
    {
        NextSequence(_order);
    }

    void NextSequence(int index)
    {
        if (index < titration.Sequences.Count)
        {
            queueItems = new(titration.Sequences[index]);
            _target = ApparatusItem.None;

            if (queueItems?.Count() > 0)
            {
                _previousTarget = _target;
                _target = queueItems!.Dequeue();
            }
        }
    }


    void OnLaboratoryTable()
    {
        if (_target == _selected)
        {
            var selectedApparatus = titration.Apparatuses.First(w => w.Item == _selected);
            // _action = selectedApparatus.Action();
            if (selectedApparatus.Update is not null)
            {
                selectedApparatus.Update(titration.Apparatuses, _target, _previousTarget);
                this.StateHasChanged();
            }
            _action = selectedApparatus.Action();

            if (queueItems?.Count() > 0)
            {
                _previousTarget = _target;
                _target = queueItems!.Dequeue();
            }
            else
            {
                NextSequence(_order += 1);
            }
        }
        else
        {

        }
    }

    string _dropStatusCss = "outline: 3px solid transparent;";
    Apparatus? _selectedApparatus;
    void HandleDragStart(DragEventArgs e, Apparatus p)
    {
        e.DataTransfer.DropEffect = "copy";
        _selectedApparatus = p;
        _dropStatusCss = "outline: 3px solid transparent;";
    }

    void HandleDragOver(DragEventArgs e)
    {
        e.DataTransfer.DropEffect = "copy";
    }

    void HandleDrop(DragEventArgs e)
    {
        _selected = _selectedApparatus!.Item;
        if (_target == _selected)
        {
            OnLaboratoryTable();
            _dropStatusCss = "outline: 3px solid green;";
        }
        else
        {
            _dropStatusCss = "outline: 3px solid red;";
        }

    }



    
    



}
