@page "/products/maths"

@inject ILogger<Maths> Logger

@rendermode InteractiveAuto

<PageTitle>Maths</PageTitle>

<h1>Maths</h1>

<div class="card">
    <div class="card-header">Calculator</div>
    <div class="card-body">
        <div style="border: solid 1px gray;
                min-height:6em;
                display:flex;
                flex-direction:column; justify-content:space-between;
                padding-inline:0.5em;">
            <div>@input.ExpressionText</div>
            <div style="font-size:2em; text-align:right;">@input.Text</div>
        </div>

        <div style="padding-block:0.5em;">
            <div>(<sub>@inputs.Count</sub></div>
        </div>
        <div style="padding-block:0.5em;">
            <div class="operators | " style="display:flex; flex-wrap:wrap; gap:0.1em; padding-bottom:0.2em;">
                @foreach (var k in operators)
                {
                    <button class="primary" @onclick="()=>OnOperatorPress(k.Operator)"
                            style="
                            /*
                            padding:0;
                            width:2em; 
                            aspect-ratio:1;
                            */
                            "
                            title="@k.Symbol">
                        <div style="display:flex; flex-direction:column; justify-content:center; align-items:center; width:100%;">
                            <div style="font-size:1em;">@k.Symbol</div>
                        </div>
                    </button>
                }               
            </div>
        </div>
    </div>
</div>



@code {
    List<Calculator.KeySymbol> operators = Calculator.Input.KEYS;

    Goke.Calculator.Input input = new();

    Stack<Calculator.Input> inputs = new();
    Calculator.Input? child;

    private void OnOperatorPress(Calculator.Key op)
    {
        if (op == Calculator.Key.BracketOpen )
        {
            var active = inputs.LastOrDefault() ?? input;
            child = active.BracketOpen();
            child.OnBracketClose += (o,e) =>
            {
                child = inputs.Pop();
                child.BracketClose();
                child = inputs.LastOrDefault();
            };
            inputs.Push(child);
        }
        else if (op == Calculator.Key.BracketClose)
        {
            if (inputs.Count > 0)
            {
                child = inputs.Pop();
                child.BracketClose();
                child = inputs.LastOrDefault();
            }
        }
        else
        {
            if (child != null)
            {
                child.SendKey(op);
            }
            else
            {
                input.SendKey(op);
            }
        }

        StateHasChanged();
    }

    
}