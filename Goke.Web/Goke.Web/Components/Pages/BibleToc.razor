@page "/bibletoc/{translation?}"
@using System.Text.Json
@using global::Bible.Entities

@inject IWebHostEnvironment Env
@inject NavigationManager NavigationManager


<h1>Table of Content</h1>

<div>
    @if (_bible is null || _bible.Books is null)
    {
        <div>Loading...</div>
    }
    else
    {
        foreach (var item in _bible.Books)
        {
            <div>
                <div @onclick="() => OnSelectedBook(item)"
                     style="cursor:pointer;"
                     title="@item.Id #@item.Order| @item.NumberOfChapters">
                    @item.Name
                </div>

                <div style='@(_selectedBook == item.Id ? "display:flex;":"display:none;");
                            flex-wrap:wrap; gap:0.2em;
                            padding-bottom:0.25em;
                                    '>
                    @for (var c = 1; c <= item.NumberOfChapters; c++)
                    {
                        var k = c;
                        <button @onclick="() => OnSelectedChapter(k)">@k</button>
                    }
                </div>
            </div>
        }
    }
</div>


@code {
    [Parameter]
    public string? Translation { get; set; } = "eng_kjv";

    string? _jsonText;
    global::Bible.Entities.Bible? _bible;

    protected override async Task OnInitializedAsync()
    {
        Translation ??= "eng_kjv";

        try
        {
            _jsonText = await ReadData();

            var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                };

            _bible = JsonSerializer.Deserialize<global::Bible.Entities.Bible>(_jsonText, options);
        }
        catch (FileNotFoundException ex)
        {
            _jsonText = "Data file not found.";
            //Logger.LogError(ex, "'wwwroot/data.txt' not found.");
        }
    }

    private async Task<string> ReadData()
    {
        string jsonFilePath = Path.Combine(Env.WebRootPath, $"data/{Translation}/books.json");
        return await File.ReadAllTextAsync(jsonFilePath);

        //using var stream = await FileSystem.OpenAppPackageFileAsync("wwwroot/eng_kjv/books.json");
        //using var reader = new StreamReader(stream);

        //return await reader.ReadToEndAsync();
    }

    string? _selectedBook;
    private void OnSelectedBook(global::Bible.Entities.Book book)
    {
        if (_selectedBook == book.Id)
        {
            _selectedBook = null;
        }
        else
        {
            _selectedBook = book.Id;
        }
    }

    int _selectedChapter;
    private void OnSelectedChapter(int chapterNumber)
    {
        _selectedChapter = chapterNumber;

        NavigationManager.NavigateTo($"bible/{_bible?.Translation!.Id}/{_selectedBook}/{_selectedChapter}");
    }
}